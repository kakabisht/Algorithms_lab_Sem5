Assignment 1 :
WAP to search an element using linear search and binary search (recursive)

1.Linear Search:
    
Objectives: To find if an element exists in a vector or not

Pseudocode / Algorithm:

1.Input size of the vector
2.Input elements in the vector
3.Input the value to be found 
4.For I from 1 to the size of the vector
5.Check if each element of the vector is equal to the value to be found
6.If the element is found return the position
7.Else return -1 

Output: 
Best case: element is at position 0
Worst case: element is not present
Average case: O(n)


2.Binary Search:

Objectives: To find if an element exists in a vector or not

Pseudocode / Algorithm:

1.Input size of the vector
2.Input elements in the vector
3.Input the value to be found 
4.For I from 1 to the size of the vector
5.While start<=end
6.Set mid =start+end /2
7.If the value is equal to the middle element, then return the middle position
8.If value > the middle element, set the lower limit= middle+1
9.If value < the middle element, set the upper limit= middle-1
10.If the element is found return the position
11.Else return -1*

Output: 
Best case: element is at position size/2
Worst case: element is not present
Average case: log2 (n)

3.Binary Search Recursive:

Objectives: To find if an element exists in a vector or not

Pseudocode / Algorithm:

1.Input size of the vector
2.Input elements in the vector
3.Input the value to be found 
4.For I from 1 to the size of the vector
5.While start<=end
6.1.Set mid =start+end /2
 .2.If the value is equal to the middle element, then return the middle position
 .3.If value > the middle element, return binary_search(mid+1,end,value)
 .4.If value < the middle element, return binary_search(start,mid-1,value)
7.If the element is found return the position
8.Else return -1 
 
Output: 
Best case: element is at position size/2
Worst case: element is not present
Average case: log2 (n)
 
Assignment - 2
WAP to perform Quick sort, Merge sort.

1.Merge Sort:

Objectives: To use a merge sort algorithm to sort an array.

Pseudocode / Algorithm:

1.Input size of the vector
2.Input elements in the vector
3.Input the value to be found 
4.If low < high 
    1.Set Mid =(low+high)/2
    2.Divide the array into smaller sizes
    3.One from low to middle
    4.Another one from middle to high
    5.We then compare these smaller sized components to sort and merge them
5.We Display the sorted array 

Output: 
Best case: O(n log (n))
Worst case: O(n log (n))
Average case: O(n log (n))
 


2.Enhanced Merge Sort

[Research paper referenced](http://www.ijcsms.com/journals/Volume%2013,%20Issue%2005,%20July%202013_deeptigrover%20research%20paper.pdf)

Objectives: To use an enhanced merge sort algorithm to sort an array.

Although merge sort is O(n log n) and insertion sort is O(n2), insertion sort has better constants and is thus faster on very small arrays.

Pseudocode / Algorithm:

1.Input size of the vector
2.Input elements in the vector
3.Input the value to be found 
4.If low < high 
    1.Set Mid =(low+high)/2
    2.Divide the array into smaller sizes
    3.One from low to middle
    4.Another one from middle to high
    5.If high -low <= 10 
        1.We use insertion sort to optimize the algorithm
    6.Else
        1.We use merge sort to compare these smaller sized components to sort and merge them
5.We Display the sorted array 
 
Output: 
Best case: O(n )
Worst case: O(n log (n))
Average case: O(n log (n))



3.Quick Sort:

Objectives: To use a quick sort algorithm to sort an array.

Pseudocode / Algorithm:

1.Input size of the vector
2.Input elements in the vector
3.Input the value to be found 
4.Selecting a pivot element 
    1.Moving the elements smaller than pivot to left
    2.Moving the elements greater than pivot to left
    3.Moving the elements equal to the pivot together with pivot
5.We Display the sorted array 
  
 
Output: 
Best case: O(n log (n))
Worst case: O(n log (n))
Average case: O(n *n)

Assignment - 3
WAP to perform Prim and Kruskal Algorithms.

1.Prim Algorithm

1.Begin
2.Create an edge list of given graph, with their weights.
3.Draw all nodes to create a skeleton for the spanning tree.
4.Select an edge with lowest weight and add it to the skeleton and delete edge from edge list.
5.Add other edges. While adding an edge take care that the one end of the edge should always be in the skeleton tree and its cost should be minimum.
6.Repeat step 5 until n-1 edges are added.
.Return.

Output:
 Since we are using an Adjacency Matrix for storing edges, hence time complexity     will  O(|V|2). 

2.Kruskal Algorithm

1.Begin
2.Create the edge list of the given graph, with their weights.
3.Sort the edge list according to their weights in ascending order.
4.Draw all the nodes to create a skeleton for the spanning tree.
5.Pick up the edge at the top of the edge list (i.e. edge with    minimum weight).
6.Remove this edge from the edge list.
7.Connect the vertices in the skeleton with the given edge. If by connecting the vertices, a cycle is created in the skeleton, then discard this edge.
8.Repeat steps 5 to 7, until n-1 edges are added or the list of edges is over.
9.Return

Output:
Let us assume a graph with e number of edges and n number of vertices. Kruskal’s algorithm starts with sorting edges.
1.Time complexity of sorting algorithm= O (e log e)
2.Time complexity of merging of components= O (e log n)

Overall time complexity of the algorithm= O (e log e) + O (e log n)

Assignment - 4
WAP to perform Dijkstra Algorithms.

Dijkstra Algorithm:
1.Start with the empty Shortest Path Tree (SPT).
2.Maintain a set SPT[] to keep track to vertices included in SPT.
3.Assign a distance value to all the vertices, (say distance []) and initialize all the distances with +∞ (Infinity) except the source vertex. This will be used to keep track of the distance of vertices *from the source vertex. The distance of source vertex to source *vertex will be 0.
4.Repeat the following steps until all vertices are processed.
    1.Pick the vertex u which is not in SPT[] and has minimum distance. Here we will loop through the vertices and find the vertex with minimum distance.
    2.Add vertex u to SPT[].
    3.Loop over all the adjacent vertices of
    4.For adjacent vertex v, if v is not in SPT[] and distance[v] > distance[u] + edge u-v weight then update distance[v] = distance[u] + edge u-v weight
 
Time Complexity: O(|V|2), since we are using a matrix for storing data.

Assignment -5
WAP to perform Knapsack problem using Greedy strategy and Dynamic Programming.

Knapsack Algorithm:
1.Find the ratio value/weight for each item and sort the item on the basis of this ratio.
2.Choose the item with the highest ratio and add them until we can’t add the next item.
3.In the end, add the next item as much as we can.
4.Print the maximum profit after the above steps.

In 0-1 Knapsack we either take the item completely or not, but in fractional Knapsack we take items in fractions.

Time Complexity:
1.For fractional= O(nlogn)
2.For 0-1 Dynamic= O(N*W)

Assignment -6

Implement Floyd’s Algorithm to find the shortest path between each pair of vertices in a weighted graph. Display the results as a distance matrix.

Instructions:
1.Input to the program is the cost adjacency matrix of a graph and output should be path matrix
2.Include time complexity analysis of Floyd’s Algorithm to find the shortest path between each pair of vertices

Algorithm:
1.Begin
2.Input the cost adjacency matrix of a graph.
3.Initialize the shortest paths between any 2 vertices with Infinity.
4.Find all pair shortest paths that use 0 intermediate vertices, then find the shortest paths that use 1 intermediate vertex and so on.. until using all N vertices as intermediate nodes.
5.Minimize the shortest paths between any 2 pairs in the previous operation.
6.For any 2 vertices (i,j) , one should actually minimize the distances between this pair using the first K nodes, so the shortest path will be: min(dist[i][k]+dist[k][j],dist[i][j]).
7.End

1.Time Complexity:
The time complexity of the Floyd-Warshall algorithm is O(n3), as there are three for loops of size n.
2.Space Complexity:
The space complexity of the Floyd-Warshall algorithm

Assignment -7

WAP to perform Optimal Merge Pattern.

1.Pseudocode:

A node represents a file with a given size also given nodes are greater than 2
1.Add all the nodes in a priority queue (Min Heap).{node.weight = file size}
2.Initialize count = 0 // variable to store file computations.
3.Repeat while (size of priority Queue is greater than 1)
4.create a new node
5.new node = pq.poll().weight+pq.poll().weight;//pq denotes priority queue, remove 1st smallest and 2nd smallest element and add their weights to get a new node
6.count += node.weight
7.add this new node to priority queue;
8.count is the final answer

1.Time complexity: O(N log N)
Time to create a min-heap tree of given records= O(n)
From min-heap, every time two minimum element will be deleted(2 log n) and their sum will be inserted(log n) after merging. It will continue at max (n-1)times
2.Space Complexity: O(n) 
As we have stored data in a linear data structure such as a min-heap tree.
 
Assignment -8

WAP to implement the n-queens problem.

1.Pseudocode / Algorithm:

1.Begin
2.Start in the leftmost column
3.If all queens are placed return true
4.Try all rows in the current column. Do following for every tried row.
    1.If the queen can be placed safely in this row then mark this [row, column] as part of the solution and recursively check if placing queen here leads to a solution.
    2.If placing the queen in [row, column] leads to a solution then return true.
    3.If placing queen doesn't lead to a solution then unmark this [row, column] (Backtrack) and go to step (a) to try other rows.
5.If all rows have been tried and nothing worked, return false to trigger backtracking.
6.End

1.Space complexity
For this algorithm it is O(N). 
2.Time complexity
T(n) = n*T(n-1) + O(n^2) which translates to O(N!) time complexity approximately.


